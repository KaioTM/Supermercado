/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import controller.RepositorioVenda;
import controller.Supermercado;
import controller.Venda;
import java.util.ArrayList;
import java.util.Vector;
import javax.swing.table.DefaultTableModel;
import model.Item;

/**
 *
 * @author visitante
 */
public class ViewRelatorioVenda extends javax.swing.JFrame {

    /**
     * Creates new form ViewRelatorio
     */
    public ViewRelatorioVenda() {
        initComponents();
        DefaultTableModel model = (DefaultTableModel) jTableRelatorio.getModel();
        model.setRowCount(0);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        jTableRelatorio = new javax.swing.JTable();
        jVoltar = new javax.swing.JButton();
        jVizualizar = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jTableRelatorio.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null},
                {null, null, null},
                {null, null, null},
                {null, null, null}
            },
            new String [] {
                "Data", "Funcion√°rio ", "Valor da Venda"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.Object.class, java.lang.String.class, java.lang.Double.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(jTableRelatorio);

        jVoltar.setText("Voltar");
        jVoltar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jVoltarActionPerformed(evt);
            }
        });

        jVizualizar.setText("Visualizar");
        jVizualizar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jVizualizarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 363, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jVoltar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jVizualizar)))
                .addContainerGap(27, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 93, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 132, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jVoltar)
                    .addComponent(jVizualizar))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jVoltarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVoltarActionPerformed
        MenuInicial menu = new MenuInicial();
        menu.setVisible(true);
        this.dispose();
    }//GEN-LAST:event_jVoltarActionPerformed

    @SuppressWarnings("empty-statement")
    private void jVizualizarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jVizualizarActionPerformed
        DefaultTableModel model = (DefaultTableModel) jTableRelatorio.getModel();
        ArrayList<Venda> vendas = Supermercado.getInstancia().getVenda().getLista();
        ArrayList<Object[]> objects = new ArrayList<Object[]>();
        model.setRowCount(0);
         if (!Supermercado.getInstancia().getCadastro().getUsuarioLogado().acessoGerente()) {
                vendas = removeVendas(Supermercado.getInstancia().getCadastro().getUsuarioLogado().getNome(), vendas);
            }
        for (int i = 0; i < vendas.size(); i++) {
            Venda venda = vendas.get(i);
            if (objects.size() == 0) {
                double valor = calculaValorTotal(venda.getItensVenda());
                Object[] obj = {venda.getData(), venda.getCaixa().getNome(), valor};
                objects.add(obj);
            } else if (verificaVenda(venda, objects)) {
                int posicao = verificaPosicao(venda, objects);
                double calcula = (double) objects.get(posicao)[2];
                double valor = calculaValorTotal(venda.getItensVenda()) + calcula;
                Object[] obj = {venda.getData(), venda.getCaixa().getNome(), valor};
                objects.set(posicao, obj);
            } else {
                double valor = calculaValorTotal(venda.getItensVenda());
                Object[] obj = {venda.getData(), venda.getCaixa().getNome(), valor};
                objects.add(obj);
            }

        }

        for (int i = 0; i < objects.size(); i++) {
            model.insertRow(i, objects.get(i));
        }

    }//GEN-LAST:event_jVizualizarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewRelatorioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewRelatorioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewRelatorioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewRelatorioVenda.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ViewRelatorioVenda().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTable jTableRelatorio;
    private javax.swing.JButton jVizualizar;
    private javax.swing.JButton jVoltar;
    // End of variables declaration//GEN-END:variables

    public float calculaValorTotal(ArrayList<Item> list) {
        float calculoTotal = 0;

        for (int i = 0; i < list.size(); i++) {
            float valorTotalItem = (list.get(i).getQuantidade() * list.get(i).getProduto().getPreco());
            calculoTotal += valorTotalItem;
        }
        return calculoTotal;
    }

    private boolean verificaVenda(Venda venda, ArrayList<Object[]> objects) {
        String data = venda.getData();
        String usuario = venda.getCaixa().getNome();
        for (int i = 0; i < objects.size(); i++) {
            String nomeObj = (String) objects.get(i)[1];
            String dataObj = (String) objects.get(i)[0];
            if (nomeObj.equals(usuario) && dataObj.equals(data)) {
                return true;
            }
        }
        return false;
    }

    private Object[] atualizaValor(ArrayList<Object[]> objects, Venda venda) {
        String data = venda.getData();
        String usuario = venda.getCaixa().getNome();
//        Object[] obj = null;
        for (int i = 0; i < objects.size(); i++) {
            String nomeObj = (String) objects.get(i)[0];
            String dataObj = (String) objects.get(i)[1];
            if (nomeObj.equals(usuario) && dataObj.equals(data)) {
                double calcula = (double) objects.get(i)[2];
                double valor = calculaValorTotal(venda.getItensVenda()) + calcula;
                Object[] obj = {nomeObj, dataObj, valor};
                return obj;
            }
        }
        return null;
//        return obj;
    }

    private int verificaPosicao(Venda venda, ArrayList<Object[]> objects) {
        String data = venda.getData();
        String usuario = venda.getCaixa().getNome();
        for (int i = 0; i < objects.size(); i++) {
            String nomeObj = (String) objects.get(i)[1];
            String dataObj = (String) objects.get(i)[0];
            if (nomeObj.equals(usuario) && dataObj.equals(data)) {
                return i;
            }
        }
        return -1;
    }

    private ArrayList<Venda> removeVendas(String nome, ArrayList<Venda> lista) {
        ArrayList<Venda> aux = new ArrayList<Venda>();
        int cont = 0;
        for (int j = 0; j < lista.size() ; j++) {
        aux.add(lista.get(j));
        }
        
        for (int i = 0; i < lista.size(); i++) {
            if (!lista.get(i).getCaixa().getNome().equals(nome)){
                aux.remove(i-cont);
                cont++;
            }
        }
        return aux;
    }

}
